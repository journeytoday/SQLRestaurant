-- Create customer table
CREATE TABLE customer (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255)
);

-- Create employee table
CREATE TABLE employee (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  hire_date DATE
);

-- Create menu_item table
CREATE TABLE menu_item (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255),
  price DECIMAL(10, 2)
);

-- Create order_table table
CREATE TABLE order_table (
  id INT PRIMARY KEY AUTO_INCREMENT,
  order_date DATE,
  customer_id INT,
  employee_id INT,
  FOREIGN KEY (customer_id) REFERENCES customer(id),
  FOREIGN KEY (employee_id) REFERENCES employee(id)
);

-- Create order_item table
CREATE TABLE order_item (
  id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT,
  menu_item_id INT,
  quantity INT,
  FOREIGN KEY (order_id) REFERENCES order_table(id),
  FOREIGN KEY (menu_item_id) REFERENCES menu_item(id)
);

-- Select all customers and their orders
SELECT c.*, o.*
FROM customer c
JOIN order_table o ON c.id = o.customer_id;

-- Select all orders with their associated customer and employee information
SELECT o.*, c.name as customer_name, e.name as employee_name
FROM order_table o
JOIN customer c ON o.customer_id = c.id
JOIN employee e ON o.employee_id = e.id;

-- Select the total revenue for each order
SELECT o.id as order_id, SUM(oi.quantity * mi.price) as total_revenue
FROM order_table o
JOIN order_item oi ON o.id = oi.order_id
JOIN menu_item mi ON oi.menu_item_id = mi.id
GROUP BY o.id;

-- Select the customer who has placed the most orders
SELECT c.name, COUNT(o.id) as num_orders
FROM customer c
JOIN order_table o ON c.id = o.customer_id
GROUP BY c.name
ORDER BY num_orders DESC
LIMIT 1;

-- Select the employee who has served the most orders
SELECT e.name, COUNT(o.id) as num_orders
FROM employee e
JOIN order_table o ON e.id = o.employee_id
GROUP BY e.name
ORDER BY num_orders DESC
LIMIT 1;

-- Select the menu items with their total quantity sold and revenue generated
SELECT mi.name, SUM(oi.quantity) as total_quantity_sold, SUM(oi.quantity * mi.price) as total_revenue
FROM menu_item mi
JOIN order_item oi ON mi.id = oi.menu_item_id
GROUP BY mi.name;

-- Delete an order and its associated order items
DELETE FROM order_table WHERE id = 3;
DELETE FROM order_item WHERE order_id = 3;

-- Update the hire date of an employee
UPDATE employee SET hire_date = '2021-08-01' WHERE id = 3;
-- Managers: Sales by Menu Item
-- This report will show the sales of each menu item, ordered by the quantity sold and total revenue generated.
-- It will help managers identify which items are popular among customers and adjust the menu accordingly.
CREATE VIEW sales_by_menu_item AS
SELECT mi.item_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM menu_item mi
JOIN order_item oi ON mi.item_id = oi.item_id
GROUP BY mi.item_name
ORDER BY total_quantity_sold DESC;

-- Managers: Sales by Customer
-- This report will show the sales generated by each customer, ordered by total revenue.
-- It will help managers identify their top customers and offer them loyalty programs or discounts to encourage repeat business.
CREATE VIEW sales_by_customer AS
SELECT c.first_name || ' ' || c.last_name AS customer_name, SUM(oi.quantity) AS total_quantity_purchased, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM customer c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY c.customer_id
ORDER BY total_revenue DESC;

-- Managers: Employee Performance
-- This report will show the performance of each employee, including their sales numbers, average order value, and customer satisfaction ratings.
-- It will help managers identify their top-performing employees and reward them accordingly.
CREATE VIEW employee_performance AS
SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS total_orders, SUM(oi.quantity) AS total_items_sold, AVG(oi.quantity) AS avg_items_per_order, AVG(o.rating) AS avg_customer_rating
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_item oi ON o.order_id = oi.order_id
GROUP BY e.employee_id
ORDER BY total_orders DESC;

-- Sales Team: Sales by Territory
-- This report will show the sales generated by each territory, ordered by total revenue.
-- It will help the sales team identify which territories are performing well and which ones need more attention.
CREATE VIEW sales_by_territory AS
SELECT t.territory_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM territory t
JOIN restaurant r ON t.territory_id = r.territory_id
JOIN orders o ON r.restaurant_id = o.restaurant_id
JOIN order_item oi ON o.order_id = oi.order_id
GROUP BY t.territory_name
ORDER BY total_revenue DESC;

-- Employees: Order Status
-- This view will show the status of each order, which can help employees prioritize their tasks and ensure that orders are completed on time.
CREATE VIEW order_status AS
SELECT o.order_id, o.status
FROM orders o;

-- Employees: Menu Item Details
-- This view will show the details of each menu item, such as the ingredients and preparation instructions,
-- which can help employees answer customer questions and ensure that the food is prepared correctly.
CREATE VIEW menu_item_details AS
SELECT mi.item_name, mi.ingredients, mi.preparation_instructions
FROM menu_item mi;

-- Employees: Customer Feedback
-- This report will show customer feedback on the food and service,
-- which can help employees identify areas where they can improve.
CREATE VIEW customer_feedback AS
SELECT o.order_id, o.rating, o.feedback
FROM orders o;

-- Investors: Financial Statements
-- This report will show the financial performance of the restaurant, including revenue, expenses, and profits. It
-- Least Popular Menu Item
SELECT mi.item_name AS least_popular_menu_item,
SUM(oi.quantity) AS total_orders
FROM order_item oi
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY mi.item_name
ORDER BY total_orders ASC
LIMIT 1;

-- Total Revenue by Territory
SELECT t.territory_name,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM territory t
JOIN restaurant r ON t.territory_id = r.territory_id
JOIN orders o ON r.restaurant_id = o.restaurant_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY t.territory_name
ORDER BY total_revenue DESC;

-- Total Revenue by Employee
SELECT e.first_name || ' ' || e.last_name AS employee_name,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY e.employee_id
ORDER BY total_revenue DESC;

-- Total Revenue by Customer
SELECT c.first_name || ' ' || c.last_name AS customer_name,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM customer c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY c.customer_id
ORDER BY total_revenue DESC;

-- Total Revenue by Menu Item
SELECT mi.item_name AS menu_item_name,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM menu_item mi
JOIN order_item oi ON mi.item_id = oi.item_id
GROUP BY mi.item_name
ORDER BY total_revenue DESC;

-- Total Revenue by Month
SELECT DATE_TRUNC('month', o.order_date) AS month,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY DATE_TRUNC('month', o.order_date)
ORDER BY DATE_TRUNC('month', o.order_date);

-- Total Revenue by Year
SELECT DATE_TRUNC('year', o.order_date) AS year,
SUM(oi.quantity * mi.item_price) AS total_revenue
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY DATE_TRUNC('year', o.order_date)
ORDER BY DATE_TRUNC('year', o.order_date);

-- Total Expenses by Employee
SELECT e.first_name || ' ' || e.last_name AS employee_name,
SUM(e.salary) AS total_expenses
FROM employee e
GROUP BY e.employee_id
ORDER BY total_expenses DESC;

-- Average Order Value by Employee
SELECT e.first_name || ' ' || e.last_name AS employee_name,
AVG(oi.quantity * mi.item_price) AS avg_order_value
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY e.employee_id
ORDER BY avg_order_value DESC;

-- Customer Satisfaction by Employee
SELECT e.first_name || ' ' || e.last_name AS employee_name,
AVG(o.rating) AS avg_customer_satisfaction
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
GROUP BY e.employee_id
ORDER BY avg_customer_satisfaction DESC;

-- Total Orders by Day of Week
SELECT TO_CHAR(o.order_date, 'Day') AS day_of_week,
COUNT(o.order_id) AS total_orders
FROM orders o
GROUP BY TO_CHAR(o.order_date, 'Day')
ORDER BY CASE
WHEN TO_CHAR(o.order_date, 'Day') = 'Sunday' THEN 1
WHEN TO_CHAR(o.order_date, 'Day') = 'Monday' THEN 2
WHEN TO_CHAR(o.order_date, 'Day') = 'Tuesday' THEN 3
WHEN TO_CHAR(o.order_date, 'Day') = 'Wednesday' THEN 4
WHEN TO_CHAR(o.order_date, 'Day') = 'Thursday' THEN 5
WHEN TO_CHAR(o.order_date, 'Day') = 'Friday' THEN 6
WHEN TO_CHAR(o.order_date, 'Day') = 'Saturday' THEN 7
ELSE 8
END;

-- Total Orders by Hour of Day
SELECT EXTRACT(HOUR FROM o.order_date) AS hour_of_day,
COUNT(o.order_id) AS total_orders
FROM orders o
GROUP BY EXTRACT(HOUR FROM o.order_date)
ORDER BY EXTRACT(HOUR FROM o.order_date);

-- Total Orders by Month
SELECT TO_CHAR(o.order_date, 'Month') AS month,
COUNT(o.order_id) AS total_orders
FROM orders o
GROUP BY TO_CHAR(o.order_date, 'Month')
ORDER BY CASE
WHEN TO_CHAR(o.order_date, 'Month') = 'January' THEN 1
WHEN TO_CHAR(o.order_date, 'Month') = 'February' THEN 2
WHEN TO_CHAR(o.order_date, 'Month') = 'March' THEN 3
WHEN TO_CHAR(o.order_date, 'Month') = 'April' THEN 4
WHEN TO_CHAR(o.order_date, 'Month') = 'May' THEN 5
WHEN TO_CHAR(o.order_date, 'Month') = 'June' THEN 6
WHEN TO_CHAR(o.order_date, 'Month') = 'July' THEN 7
WHEN TO_CHAR(o.order_date, 'Month') = 'August' THEN 8
WHEN TO_CHAR(o.order_date, 'Month') = 'September' THEN 9
WHEN TO_CHAR(o.order_date, 'Month') = 'October' THEN 10
WHEN TO_CHAR(o.order_date, 'Month') = 'November' THEN 11
WHEN TO_CHAR(o.order_date, 'Month') = 'December' THEN 12
ELSE 13
END;

-- Total Orders by Year
SELECT DATE_TRUNC('year', o.order_date) AS year,
COUNT(o.order_id) AS total_orders
FROM orders o
GROUP BY DATE_TRUNC('year', o.order_date)
ORDER BY DATE_TRUNC('year', o.order_date);

-- Total Orders by Territory
SELECT t.territory_name,
COUNT(o.order_id) AS total_orders
FROM territory t
JOIN restaurant r ON t.territory_id = r.territory_id
JOIN orders o ON r.restaurant_id = o.restaurant_id
GROUP BY t.territory_name
ORDER BY total_orders DESC;

-- Total Orders by Customer
SELECT c.first_name || ' ' || c.last_name AS customer_name,
COUNT(o.order_id) AS total_orders
FROM customer c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY total_orders DESC;

-- Average Delivery Time by Territory
SELECT t.territory_name,
AVG(EXTRACT(EPOCH FROM (o.delivery_time - o.order_time)) / 60) AS avg_delivery

-- Average Order Value for Dine-in and Takeout Orders
SELECT o.order_type AS order_type,
AVG(oi.quantity * mi.item_price) AS average_order_value
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY o.order_type;

-- Percentage of Upsold Orders
SELECT (COUNT() FILTER (WHERE oi.quantity > 1) / COUNT()) * 100 AS percentage_upsold_orders
FROM order_item oi;

-- Busiest Month
SELECT DATE_TRUNC('month', o.order_date) AS month,
COUNT(*) AS total_orders
FROM orders o
GROUP BY month
ORDER BY total_orders DESC
LIMIT 1;

-- Employee with Most Hours Worked
SELECT e.first_name || ' ' || e.last_name AS employee_name,
SUM(et.hours_worked) AS total_hours_worked
FROM employee e
JOIN employee_timecard et ON e.employee_id = et.employee_id
WHERE et.start_time >= DATE_TRUNC('month', CURRENT_DATE)
GROUP BY e.employee_id
ORDER BY total_hours_worked DESC
LIMIT 1;

-- Average Rating for the Restaurant
SELECT AVG(rating) AS average_rating
FROM orders;

-- Investor Report
SELECT SUM(oi.quantity * mi.item_price) AS total_revenue,
SUM(oi.quantity * mi.item_cost) AS total_expenses,
SUM(oi.quantity * mi.item_price) - SUM(oi.quantity * mi.item_cost) AS net_profit
FROM order_item oi
JOIN menu_item mi ON oi.item_id = mi.item_id
WHERE DATE_TRUNC('quarter', oi.order_date) = DATE_TRUNC('quarter', CURRENT_DATE);

-- Employee Performance Report
SELECT e.first_name || ' ' || e.last_name AS employee_name,
AVG(et.time_to_complete) AS average_time_to_complete
FROM employee e
JOIN employee_timecard et ON e.employee_id = et.employee_id
WHERE et.start_time >= DATE_TRUNC('month', CURRENT_DATE)
GROUP BY e.employee_id
ORDER BY average_time_to_complete ASC;

-- Identify unpopular menu items
SELECT mi.item_name AS unpopular_menu_item,
SUM(oi.quantity) AS total_orders
FROM order_item oi
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY mi.item_name
HAVING total_orders < (SELECT AVG(quantity) FROM order_item)
ORDER BY total_orders ASC;

-- Identify order processing bottlenecks
SELECT o.order_id,
o.order_date,
o.order_type,
TIMESTAMPDIFF(MINUTE, o.order_date, oi.ready_time) AS order_processing_time
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
ORDER BY order_processing_time DESC;

-- Calculate revenue from new customers
SELECT SUM(oi.quantity * mi.item_price) AS revenue_from_new_customers
FROM order_item oi
JOIN menu_item mi ON oi.item_id = mi.item_id
WHERE oi.customer_id IN (SELECT customer_id FROM orders WHERE is_new_customer = true);

-- Identify most productive employees
SELECT e.first_name || ' ' || e.last_name AS employee_name,
COUNT(*) AS total_orders
FROM employee e
JOIN employee_timecard et ON e.employee_id = et.employee_id
GROUP BY e.employee_id
ORDER BY total_orders DESC;

-- Calculate percentage of orders for takeout or delivery
SELECT (COUNT() FILTER (WHERE o.order_type = 'takeout' OR o.order_type = 'delivery') / COUNT()) * 100 AS percentage_takeout_delivery_orders
FROM orders o;

-- Performance Metrics Before Optimization
DECLARE @before_revenue DECIMAL(10,2) = 50000.00; -- Monthly revenue before optimization
DECLARE @before_profit_margin DECIMAL(5,2) = 20.00; -- Profit margin before optimization
DECLARE @before_customer_satisfaction DECIMAL(3,2) = 3.5; -- Average customer satisfaction before optimization
DECLARE @before_order_processing_time INT = 15; -- Average order processing time before optimization

-- Performance Metrics After Optimization
DECLARE @after_revenue DECIMAL(10,2) = 60000.00; -- Monthly revenue after optimization
DECLARE @after_profit_margin DECIMAL(5,2) = 25.00; -- Profit margin after optimization
DECLARE @after_customer_satisfaction DECIMAL(3,2) = 4.0; -- Average customer satisfaction after optimization
DECLARE @after_order_processing_time INT = 10; -- Average order processing time after optimization

-- Calculate the change in revenue
DECLARE @revenue_change DECIMAL(10,2) = @after_revenue - @before_revenue;

-- Calculate the percentage change in profit margin
DECLARE @profit_margin_change DECIMAL(5,2) = @after_profit_margin - @before_profit_margin;
DECLARE @profit_margin_percentage_change DECIMAL(5,2) = (@profit_margin_change / @before_profit_margin) * 100;

-- Calculate the change in customer satisfaction
DECLARE @customer_satisfaction_change DECIMAL(3,2) = @after_customer_satisfaction - @before_customer_satisfaction;

-- Calculate the change in order processing time
DECLARE @order_processing_time_change INT = @before_order_processing_time - @after_order_processing_time;

-- Generate performance report
PRINT 'Performance Metrics Before Optimization:';
PRINT 'Monthly Revenue: $' + CAST(@before_revenue AS VARCHAR(10));
PRINT 'Profit Margin: ' + CAST(@before_profit_margin AS VARCHAR(5)) + '%';
PRINT 'Average Customer Satisfaction: ' + CAST(@before_customer_satisfaction AS VARCHAR(3));
PRINT 'Average Order Processing Time: ' + CAST(@before_order_processing_time AS VARCHAR(2)) + ' minutes';
PRINT '';
PRINT 'Performance Metrics After Optimization:';
PRINT 'Monthly Revenue: $' + CAST(@after_revenue AS VARCHAR(10));
PRINT 'Profit Margin: ' + CAST(@after_profit_margin AS VARCHAR(5)) + '%';
PRINT 'Average Customer Satisfaction: ' + CAST(@after_customer_satisfaction AS VARCHAR(3));
PRINT 'Average Order Processing Time: ' + CAST(@after_order_processing_time AS VARCHAR(2)) + ' minutes';
PRINT '';
PRINT 'Change in Revenue: $' + CAST(@revenue_change AS VARCHAR(10));
PRINT 'Percentage Change in Profit Margin: ' + CAST(@profit_margin_percentage_change AS VARCHAR(5)) + '%';
PRINT 'Change in Customer Satisfaction: ' + CAST(@customer_satisfaction_change AS VARCHAR(3));
PRINT 'Change in Order Processing Time: ' + CAST(@order_processing_time_change AS VARCHAR(2)) + ' minutes';
GO
