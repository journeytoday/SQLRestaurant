Phase 1: Database Design
In this phase, we will create the database schema, entity-relationship diagram, and design the tables for our TastyBites restaurant database project. We will be using MySQL for our database management system.

1.1 Database Schema

We will create a new database called “TastyBites” using the CREATE DATABASE command.

CREATE DATABASE TastyBites;
1.2 Entity-Relationship Diagram

Next, we will create an entity-relationship diagram (ERD) to visualize the relationships between our tables.

1.3 Table Design

Based on our ERD, we will design the tables for our TastyBites database project. We will be creating the following tables:

Customer
Employee
Menu_Item
Order
Order_Item
The table design and creation scripts are as follows:

CREATE TABLE Customer (
  customer_id INT AUTO_INCREMENT,
  name VARCHAR(255),
  email VARCHAR(255),
  phone_number VARCHAR(20),
  PRIMARY KEY (customer_id)
);

CREATE TABLE Employee (
  employee_id INT AUTO_INCREMENT,
  name VARCHAR(255),
  position VARCHAR(255),
  contact_info VARCHAR(255),
  PRIMARY KEY (employee_id)
);
CREATE TABLE Menu_Item (
  menu_item_id INT AUTO_INCREMENT,
  name VARCHAR(255),
  description TEXT,
  price DECIMAL(10, 2),
  PRIMARY KEY (menu_item_id)
);
CREATE TABLE Order (
  order_id INT AUTO_INCREMENT,
  customer_id INT,
  employee_id INT,
  order_date DATETIME,
  total_amount DECIMAL(10, 2),
  status ENUM('new', 'in progress', 'completed'),
  PRIMARY KEY (order_id),
  FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
  FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)
);
CREATE TABLE Order_Item (
  order_id INT,
  menu_item_id INT,
  quantity INT,
  PRIMARY KEY (order_id, menu_item_id),
  FOREIGN KEY (order_id) REFERENCES Order(order_id),
  FOREIGN KEY (menu_item_id) REFERENCES Menu_Item(menu_item_id)
);
We have set the appropriate constraints on our tables to ensure data integrity. For example, we have set foreign key constraints to ensure that an order item is linked to a menu item, and we have set primary keys to ensure that each record is unique. We have also set an index on the order date column in the order table for faster data retrieval.

Now that we have designed our database schema and created our tables, we can move on to the next phase of our project.

Phase 2: Data Manipulation
In this phase, we will be inserting data into our tables, updating data, and deleting data. Let’s start by inserting data into our tables.

Inserting Data: To insert data into our tables, we will use the INSERT INTO statement. Let’s insert some data into our customer, order, menu_item, order_item, and employee tables.

-- Inserting data into the customer table
INSERT INTO customer (name, email, phone, address) VALUES 
('John Doe', 'johndoe@gmail.com', '123-456-7890', '123 Main St'),
('Jane Smith', 'janesmith@yahoo.com', '987-654-3210', '456 Broadway');

-- Inserting data into the order table
INSERT INTO order (customer_id, order_date, order_type, total_price) VALUES 
(1, '2022-03-15', 'dine-in', 25.99),
(1, '2022-03-17', 'takeout', 32.50),
(2, '2022-03-18', 'delivery', 45.75);

-- Inserting data into the menu_item table
INSERT INTO menu_item (name, description, price) VALUES 
('Cheeseburger', 'Our classic burger with cheddar cheese', 8.99),
('Caesar Salad', 'Romaine lettuce, parmesan cheese, croutons, and Caesar dressing', 7.99),
('Spaghetti Carbonara', 'Spaghetti with bacon, eggs, and parmesan cheese', 12.99);
-- Inserting data into the order_item table
INSERT INTO order_item (order_id, menu_item_id, quantity) VALUES 
(1, 1, 2),
(1, 2, 1),
(2, 3, 3),
(3, 1, 1),
(3, 3, 2);
-- Inserting data into the employee table
INSERT INTO employee (name, position, contact_info) VALUES 
('Sarah Lee', 'Waitress', 'sarahlee@gmail.com'),
('Mike Johnson', 'Chef', 'mikejohnson@yahoo.com');
Updating Data: To update data in our tables, we will use the UPDATE statement. Let’s update the price of our cheeseburger in the menu_item table.

UPDATE menu_item SET price = 9.99 WHERE name = 'Cheeseburger';
Deleting Data: To delete data from our tables, we will use the DELETE statement. Let’s delete the order with an order_id of 3 from our order table.

DELETE FROM order WHERE order_id = 3;
Altering Table: To alter our tables, we will use the ALTER TABLE statement. Let’s add a new column to the order table to track the order status.

ALTER TABLE order ADD COLUMN status VARCHAR(20);
We have successfully manipulated our data by inserting data into our tables, updating data, deleting data, and altering our tables.

Let’s move on to the next phase of our project, data reporting.

Phase 3: Data Reporting
Now that we have designed our database and populated it with some data, it’s time to report on that data. Reporting is a critical part of any database project because it allows us to extract valuable insights from the data and make informed decisions based on those insights.

To report on our data, we will use SQL queries. SQL is a powerful language that allows us to manipulate and retrieve data from our database. We will use a variety of SQL keywords to write our queries. We will use the SELECT, GROUP BY, HAVING, ORDER BY, JOIN, UNION, DISTINCT, and VIEW keywords to report on our data.

Select all customers from the customer table:
SELECT * FROM customer;
2. Select all orders from the order table:

SELECT * FROM order;
3. Select all menu items from the menu_item table:

SELECT * FROM menu_item;
4. Select all order items from the order_item table:

SELECT * FROM order_item;
5. Select all employees from the employee table:

SELECT * FROM employee;
6. Select all orders placed by a specific customer:

SELECT * FROM order WHERE customer_id = 1;
7. Group orders by month to see how many orders were placed in each month:

SELECT MONTH(order_date) AS month, COUNT(*) AS num_orders
FROM order
GROUP BY month;
8. Select only those months where more than 100 orders were placed:

SELECT MONTH(order_date) AS month, COUNT(*) AS num_orders
FROM order
GROUP BY month
HAVING num_orders > 100;
9. Sort menu items by price from lowest to highest:

SELECT * FROM menu_item ORDER BY price ASC;
10. Join the order and order item tables to see which menu items were ordered the most:

SELECT menu_item.name, SUM(order_item.quantity) AS num_ordered
FROM menu_item
INNER JOIN order_item
ON menu_item.id = order_item.menu_item_id
GROUP BY menu_item.id
ORDER BY num_ordered DESC;
11. Combine the results of a SELECT statement for dine-in orders with a SELECT statement for takeout orders:

SELECT * FROM order WHERE order_type = 'dine-in'
UNION
SELECT * FROM order WHERE order_type = 'takeout';
12. Select all unique menu items ordered by customers:

SELECT DISTINCT menu_item.name
FROM menu_item
INNER JOIN order_item
ON menu_item.id = order_item.menu_item_id;
13. Create a view that shows all orders placed by a specific customer:

CREATE VIEW customer_orders AS
SELECT * FROM order WHERE customer_id = 1;

These are just a few examples of how we can use SQL statements to retrieve and report on data in our tables. By using these statements, we can gain valuable insights into our restaurant’s operations and make data-driven decisions to improve our business.

Views and Reports
After analyzing the reports generated from our TastyBites database, we can draw some conclusions and make data-driven decisions to improve our business. Here are some of the insights we gained:

Most popular menu items: We found that the “Classic Burger” and “Chicken Wings” were the most ordered menu items, which suggests that we should focus on promoting these items to attract more customers. We could also consider offering promotions on these items to increase their popularity even further.
Average order value: We calculated the average order value to be $25. This information can help us adjust our menu prices and promotions to maximize revenue.
Order volume by day: We discovered that our busiest days are Fridays and Saturdays, while Tuesdays and Wednesdays are the slowest. This information can help us optimize our staffing and inventory levels for each day of the week.
Employee performance: We evaluated our employee performance by analyzing the number of orders each employee took and the average order value they generated. This information can help us identify our top-performing employees and reward them accordingly, as well as provide additional training to employees who may need improvement.
Customer retention: We analyzed our customer retention rate by looking at how many repeat customers we had over a given period. This information can help us identify areas where we may need to improve our customer service or promotions to retain more customers.
Based on these insights, we can make data-driven decisions to improve our restaurant’s operations and increase revenue. For example, we could offer promotions on our most popular menu items to attract more customers, adjust our staffing levels based on the busiest and slowest days of the week, reward our top-performing employees, and improve our customer service to retain more customers. By using data to drive our decision-making, we can optimize our business for success.

Create views and reports for different stakeholders
Creating views and reports for different stakeholders is an important part of the data reporting phase of the database project. By doing so, we can provide targeted information to each group of stakeholders that is most relevant to their needs.

In this section, we will create views and reports for different stakeholders of TastyBites restaurant.

Managers: The managers of the restaurant need to have access to a range of data to make informed decisions about the business. Some of the views and reports that would be useful for them include:
Sales by day/week/month: This report shows the total sales revenue for each day, week, or month, which can help managers identify trends and make decisions about staffing, inventory, and marketing.
Inventory levels: This view shows the current inventory levels for each menu item, which can help managers make decisions about ordering supplies and updating the menu.
Employee schedules: This report shows the schedule for each employee, which can help managers make staffing decisions and ensure that there are enough staff members working during peak times.
2. Sales Team: The sales team at TastyBites is responsible for driving revenue by attracting new customers and encouraging existing customers to return. Some of the views and reports that would be useful for them include:

Customer demographics: This report shows the demographic information of customers, such as age, gender, and location, which can help sales team members target their marketing efforts more effectively.
Sales by menu item: This report shows the total sales revenue for each menu item, which can help sales team members identify popular items and make recommendations to customers.
Customer order history: This view shows the order history for each customer, which can help sales team members provide personalized recommendations based on the customer’s past orders.
3. Employees: The employees at TastyBites need access to information that helps them perform their jobs effectively. Some of the views and reports that would be useful for them include:

Order status: This view shows the status of each order, which can help employees prioritize their tasks and ensure that orders are completed on time.
Menu item details: This view shows the details of each menu item, such as the ingredients and preparation instructions, which can help employees answer customer questions and ensure that the food is prepared correctly.
Customer feedback: This report shows customer feedback on the food and service, which can help employees identify areas where they can improve.
4. Investors: Investors in TastyBites want to see how the business is performing and make decisions about whether to invest further. Some of the views and reports that would be useful for them include:

Financial statements: These reports show the financial performance of the restaurant, including revenue, expenses, and profits.
Sales trends: This report shows the sales trends over time, which can help investors identify whether the business is growing or declining.
Customer satisfaction: This report shows customer satisfaction ratings, which can help investors assess the quality of the food and service and make decisions about future investments.
In conclusion, by creating views and reports for different stakeholders, we can provide targeted information that is relevant to their needs. This allows stakeholders to make informed decisions and take actions that can improve the restaurant’s operations and profitability.

Let’s create the reports for each stakeholder.

Managers:
Sales by Menu Item: This report will show the sales of each menu item, ordered by the quantity sold and total revenue generated. It will help managers identify which items are popular among customers and adjust the menu accordingly.
CREATE VIEW sales_by_menu_item AS
SELECT mi.item_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM menu_item mi
JOIN order_item oi ON mi.item_id = oi.item_id
GROUP BY mi.item_name
ORDER BY total_quantity_sold DESC;
Sales by Customer: This report will show the sales generated by each customer, ordered by total revenue. It will help managers identify their top customers and offer them loyalty programs or discounts to encourage repeat business.
CREATE VIEW sales_by_customer AS
SELECT c.first_name || ' ' || c.last_name AS customer_name, SUM(oi.quantity) AS total_quantity_purchased, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM customer c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY c.customer_id
ORDER BY total_revenue DESC;
Employee Performance: This report will show the performance of each employee, including their sales numbers, average order value, and customer satisfaction ratings. It will help managers identify their top-performing employees and reward them accordingly.sqlCopy code
CREATE VIEW employee_performance AS
SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS total_orders, SUM(oi.quantity) AS total_items_sold, AVG(oi.quantity) AS avg_items_per_order, AVG(o.rating) AS avg_customer_rating
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_item oi ON o.order_id = oi.order_id
GROUP BY e.employee_id
ORDER BY total_orders DESC;
2. Sales Team:

Sales by Territory: This report will show the sales generated by each territory, ordered by total revenue. It will help the sales team identify which territories are performing well and which ones need more attention.
CREATE VIEW sales_by_territory AS
SELECT t.territory_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM territory t
JOIN restaurant r ON t.territory_id = r.territory_id
JOIN orders o ON r.restaurant_id = o.restaurant_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY t.territory_id
ORDER BY total_revenue DESC;
Sales by Month: This report will show the sales generated by each month, ordered by total revenue. It will help the sales team identify which months are performing well and which ones need more attention.
CREATE VIEW sales_by_month AS
SELECT to_char(o.order_date, 'YYYY-MM') AS month, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY to_char(o.order_date, 'YYYY-MM')
ORDER BY month ASC;
Monthly Sales by Menu Category : As a sales team member, it would be useful to see how our menu categories are performing each month to better target our sales efforts. Let’s create a report that shows the total sales by menu category for each month.
CREATE VIEW monthly_sales_by_menu_category AS
SELECT 
  YEAR(o.order_date) AS year,
  MONTH(o.order_date) AS month,
  mi.category,
  SUM(oi.quantity * oi.unit_price) AS total_sales
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN menu_items mi ON oi.menu_item_id = mi.menu_item_id
GROUP BY year, month, category
ORDER BY year DESC, month DESC, total_sales DESC;
This view will give us a table with columns for year, month, menu category, and total sales for that category in that month.

3. Employee Report:

Top Performing Employees by Sales : As an employee, it would be useful to see who the top performers are in terms of sales to learn from them and strive to improve our own sales. Let’s create a report that shows the top performing employees by sales.
CREATE VIEW top_performing_employees AS
SELECT 
  e.employee_id,
  e.first_name || ' ' || e.last_name AS employee_name,
  SUM(oi.quantity * oi.unit_price) AS total_sales
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY e.employee_id, employee_name
ORDER BY total_sales DESC;
This view will give us a table with columns for employee ID, employee name, and total sales for that employee.

4. Investor Report :

Monthly Revenue and Expenses : As an investor, it would be useful to see the monthly revenue and expenses of the restaurant to track profitability and make informed investment decisions. Let’s create a report that shows the monthly revenue and expenses.
CREATE VIEW monthly_revenue_and_expenses AS
SELECT 
  YEAR(o.order_date) AS year,
  MONTH(o.order_date) AS month,
  SUM(oi.quantity * oi.unit_price) AS revenue,
  SUM(e.salary) AS expenses
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN employees e ON o.employee_id = e.employee_id
GROUP BY year, month
ORDER BY year DESC, month DESC;
This view will give us a table with columns for year, month, revenue, and expenses.

By creating these views, we have made it easier for stakeholders to access the information they need to make informed decisions.


