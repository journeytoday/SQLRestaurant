-- Create the customer table
CREATE TABLE customer (
id INT PRIMARY KEY,
name VARCHAR(50),
email VARCHAR(50)
);

-- Create the menu_item table
CREATE TABLE menu_item (
id INT PRIMARY KEY,
name VARCHAR(50),
description VARCHAR(255),
price DECIMAL(10, 2)
);

-- Create the order table
CREATE TABLE order (
id INT PRIMARY KEY,
order_date DATE,
order_type VARCHAR(20),
customer_id INT,
employee_id INT,
FOREIGN KEY (customer_id) REFERENCES customer(id),
FOREIGN KEY (employee_id) REFERENCES employee(id)
);

-- Create the order_item table
CREATE TABLE order_item (
id INT PRIMARY KEY,
order_id INT,
menu_item_id INT,
quantity INT,
FOREIGN KEY (order_id) REFERENCES order(id),
FOREIGN KEY (menu_item_id) REFERENCES menu_item(id)
);

-- Create the employee table
CREATE TABLE employee (
id INT PRIMARY KEY,
name VARCHAR(50),
title VARCHAR(50),
hire_date DATE
);

-- Insert data into the customer table
INSERT INTO customer (id, name, email) VALUES
(1, 'John Smith', 'john.smith@example.com'),
(2, 'Jane Doe', 'jane.doe@example.com'),
(3, 'Bob Johnson', 'bob.johnson@example.com');

-- Insert data into the menu_item table
INSERT INTO menu_item (id, name, description, price) VALUES
(1, 'Cheeseburger', 'A classic cheeseburger', 8.99),
(2, 'French Fries', 'Crispy golden fries', 2.99),
(3, 'Soft Drink', 'Refreshing soda', 1.99);

-- Insert data into the order table
INSERT INTO order (id, order_date, order_type, customer_id, employee_id) VALUES
(1, '2022-03-15', 'dine-in', 1, 1),
(2, '2022-03-16', 'takeout', 2, 2),
(3, '2022-03-17', 'dine-in', 3, 1),
(4, '2022-03-18', 'takeout', 1, 3);

-- Insert data into the order_item table
INSERT INTO order_item (id, order_id, menu_item_id, quantity) VALUES
(1, 1, 1, 2),
(2, 1, 2, 1),
(3, 2, 1, 1),
(4, 3, 3, 3),
(5, 4, 1, 2),
(6, 4, 2, 1);

-- Insert data into the employee table
INSERT INTO employee (id, name, title, hire_date) VALUES
(1, 'Tom Smith', 'Manager', '2020-01-01'),
(2, 'Sarah Johnson', 'Server', '2021-05-01'),
(3, 'Mike Davis', 'Cook', '2021-09-01');

-- Update the price of the Cheeseburger menu item
UPDATE menu_item SET price = 9.99 WHERE name = 'Cheeseburger';

-- Select all customers from the customer table
SELECT * FROM customer;

-- Select all orders from the order table
SELECT * FROM order;

-- Select all menu items from the menu_item table
SELECT * FROM menu_item;

-- Select all order items from the order_item table
SELECT * FROM order_item;

-- Select all employees from the employee table:
SELECT * FROM employee;

-- Select all orders placed by a specific customer:
SELECT * FROM order WHERE customer_id = 1;
-- Group orders by month to see how many orders were placed in each month:
SELECT MONTH(order_date) AS month, COUNT(*) AS num_orders
FROM order
GROUP BY month;

-- Select only those months where more than 100 orders were placed:
SELECT MONTH(order_date) AS month, COUNT(*) AS num_orders
FROM order
GROUP BY month
HAVING num_orders > 100;

-- Sort menu items by price from lowest to highest:
SELECT * FROM menu_item ORDER BY price ASC;

-- Join the order and order item tables to see which menu items were ordered the most:
SELECT menu_item.name, SUM(order_item.quantity) AS num_ordered
FROM menu_item
INNER JOIN order_item
ON menu_item.id = order_item.menu_item_id
GROUP BY menu_item.id
ORDER BY num_ordered DESC;

-- Combine the results of a SELECT statement for dine-in orders with a SELECT statement for takeout orders:
SELECT * FROM order WHERE order_type = 'dine-in'
UNION
SELECT * FROM order WHERE order_type = 'takeout';

-- Select all unique menu items ordered by customers:
SELECT DISTINCT menu_item.name
FROM menu_item
INNER JOIN order_item
ON menu_item.id = order_item.menu_item_id;

-- Create a view that shows all orders placed by a specific customer:
CREATE VIEW customer_orders AS
SELECT * FROM order WHERE customer_id = 1;
-- Most popular menu items
SELECT menu_item.name, SUM(order_item.quantity) AS total_ordered
FROM menu_item
INNER JOIN order_item ON menu_item.id = order_item.menu_item_id
GROUP BY menu_item.name
ORDER BY total_ordered DESC
LIMIT 2; -- limit results to top 2 items

-- Average order value
SELECT AVG(total_price) AS average_order_value
FROM (
  SELECT order_id, SUM(quantity * price) AS total_price
  FROM order_item
  GROUP BY order_id
) AS order_totals;

-- Order volume by day
SELECT DATE(order.order_date) AS order_day, COUNT(*) AS order_count
FROM order
GROUP BY order_day
ORDER BY order_day;

-- Employee performance
SELECT employee.name, COUNT(DISTINCT order.employee_id) AS num_orders, AVG(total_price) AS avg_order_value
FROM order
INNER JOIN employee ON order.employee_id = employee.id
INNER JOIN (
  SELECT order_id, SUM(quantity * price) AS total_price
  FROM order_item
  GROUP BY order_id
) AS order_totals ON order.id = order_totals.order_id
GROUP BY employee.name
ORDER BY num_orders DESC;

-- Customer retention
SELECT COUNT(DISTINCT order.customer_id) AS num_customers
FROM order
WHERE DATE(order.order_date) BETWEEN '2022-01-01' AND '2022-12-31'; -- specify date range for analysis


Create views and reports for different stakeholders
Creating views and reports for different stakeholders is an important part of the data reporting phase of the database project. By doing so, we can provide targeted information to each group of stakeholders that is most relevant to their needs.

In this section, we will create views and reports for different stakeholders of TastyBites restaurant.

Managers: The managers of the restaurant need to have access to a range of data to make informed decisions about the business. Some of the views and reports that would be useful for them include:
Sales by day/week/month: This report shows the total sales revenue for each day, week, or month, which can help managers identify trends and make decisions about staffing, inventory, and marketing.
Inventory levels: This view shows the current inventory levels for each menu item, which can help managers make decisions about ordering supplies and updating the menu.
Employee schedules: This report shows the schedule for each employee, which can help managers make staffing decisions and ensure that there are enough staff members working during peak times.
2. Sales Team: The sales team at TastyBites is responsible for driving revenue by attracting new customers and encouraging existing customers to return. Some of the views and reports that would be useful for them include:

Customer demographics: This report shows the demographic information of customers, such as age, gender, and location, which can help sales team members target their marketing efforts more effectively.
Sales by menu item: This report shows the total sales revenue for each menu item, which can help sales team members identify popular items and make recommendations to customers.
Customer order history: This view shows the order history for each customer, which can help sales team members provide personalized recommendations based on the customer’s past orders.
3. Employees: The employees at TastyBites need access to information that helps them perform their jobs effectively. Some of the views and reports that would be useful for them include:

Order status: This view shows the status of each order, which can help employees prioritize their tasks and ensure that orders are completed on time.
Menu item details: This view shows the details of each menu item, such as the ingredients and preparation instructions, which can help employees answer customer questions and ensure that the food is prepared correctly.
Customer feedback: This report shows customer feedback on the food and service, which can help employees identify areas where they can improve.
4. Investors: Investors in TastyBites want to see how the business is performing and make decisions about whether to invest further. Some of the views and reports that would be useful for them include:

Financial statements: These reports show the financial performance of the restaurant, including revenue, expenses, and profits.
Sales trends: This report shows the sales trends over time, which can help investors identify whether the business is growing or declining.
Customer satisfaction: This report shows customer satisfaction ratings, which can help investors assess the quality of the food and service and make decisions about future investments.
In conclusion, by creating views and reports for different stakeholders, we can provide targeted information that is relevant to their needs. This allows stakeholders to make informed decisions and take actions that can improve the restaurant’s operations and profitability.

Let’s create the reports for each stakeholder.

Managers:
Sales by Menu Item: This report will show the sales of each menu item, ordered by the quantity sold and total revenue generated. It will help managers identify which items are popular among customers and adjust the menu accordingly.
CREATE VIEW sales_by_menu_item AS
SELECT mi.item_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM menu_item mi
JOIN order_item oi ON mi.item_id = oi.item_id
GROUP BY mi.item_name
ORDER BY total_quantity_sold DESC;
Sales by Customer: This report will show the sales generated by each customer, ordered by total revenue. It will help managers identify their top customers and offer them loyalty programs or discounts to encourage repeat business.
CREATE VIEW sales_by_customer AS
SELECT c.first_name || ' ' || c.last_name AS customer_name, SUM(oi.quantity) AS total_quantity_purchased, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM customer c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY c.customer_id
ORDER BY total_revenue DESC;
Employee Performance: This report will show the performance of each employee, including their sales numbers, average order value, and customer satisfaction ratings. It will help managers identify their top-performing employees and reward them accordingly.sqlCopy code
CREATE VIEW employee_performance AS
SELECT e.first_name || ' ' || e.last_name AS employee_name, COUNT(o.order_id) AS total_orders, SUM(oi.quantity) AS total_items_sold, AVG(oi.quantity) AS avg_items_per_order, AVG(o.rating) AS avg_customer_rating
FROM employee e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_item oi ON o.order_id = oi.order_id
GROUP BY e.employee_id
ORDER BY total_orders DESC;
2. Sales Team:

Sales by Territory: This report will show the sales generated by each territory, ordered by total revenue. It will help the sales team identify which territories are performing well and which ones need more attention.
CREATE VIEW sales_by_territory AS
SELECT t.territory_name, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM territory t
JOIN restaurant r ON t.territory_id = r.territory_id
JOIN orders o ON r.restaurant_id = o.restaurant_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY t.territory_id
ORDER BY total_revenue DESC;
Sales by Month: This report will show the sales generated by each month, ordered by total revenue. It will help the sales team identify which months are performing well and which ones need more attention.
CREATE VIEW sales_by_month AS
SELECT to_char(o.order_date, 'YYYY-MM') AS month, SUM(oi.quantity) AS total_quantity_sold, SUM(mi.item_price * oi.quantity) AS total_revenue
FROM orders o
JOIN order_item oi ON o.order_id = oi.order_id
JOIN menu_item mi ON oi.item_id = mi.item_id
GROUP BY to_char(o.order_date, 'YYYY-MM')
ORDER BY month ASC;
Monthly Sales by Menu Category : As a sales team member, it would be useful to see how our menu categories are performing each month to better target our sales efforts. Let’s create a report that shows the total sales by menu category for each month.
CREATE VIEW monthly_sales_by_menu_category AS
SELECT 
  YEAR(o.order_date) AS year,
  MONTH(o.order_date) AS month,
  mi.category,
  SUM(oi.quantity * oi.unit_price) AS total_sales
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN menu_items mi ON oi.menu_item_id = mi.menu_item_id
GROUP BY year, month, category
ORDER BY year DESC, month DESC, total_sales DESC;
This view will give us a table with columns for year, month, menu category, and total sales for that category in that month.

3. Employee Report:

Top Performing Employees by Sales : As an employee, it would be useful to see who the top performers are in terms of sales to learn from them and strive to improve our own sales. Let’s create a report that shows the top performing employees by sales.
CREATE VIEW top_performing_employees AS
SELECT 
  e.employee_id,
  e.first_name || ' ' || e.last_name AS employee_name,
  SUM(oi.quantity * oi.unit_price) AS total_sales
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY e.employee_id, employee_name
ORDER BY total_sales DESC;
This view will give us a table with columns for employee ID, employee name, and total sales for that employee.

4. Investor Report :

Monthly Revenue and Expenses : As an investor, it would be useful to see the monthly revenue and expenses of the restaurant to track profitability and make informed investment decisions. Let’s create a report that shows the monthly revenue and expenses.
CREATE VIEW monthly_revenue_and_expenses AS
SELECT 
  YEAR(o.order_date) AS year,
  MONTH(o.order_date) AS month,
  SUM(oi.quantity * oi.unit_price) AS revenue,
  SUM(e.salary) AS expenses
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN employees e ON o.employee_id = e.employee_id
GROUP BY year, month
ORDER BY year DESC, month DESC;
This view will give us a table with columns for year, month, revenue, and expenses.

By creating these views, we have made it easier for stakeholders to access the information they need to make informed decisions.


